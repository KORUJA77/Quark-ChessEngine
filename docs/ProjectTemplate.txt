====================
| PROJECT TEMPLATE |
====================
Welcome! This is a chess engine built completely in python as an exercise in
building fully fledged programs. I'll try my very best to make my work clear,
concise and bug-free but bare with me: I'm a complete amateur at this stuff.

"You can use an eraser on the drafting table or a sledgehammer on the
construction site" - Frank Lloyd Wright
"Beauty of style and harmony and grace and good rhythm depends on simplicity."
- Plato


TABLE OF CONTENTS
===================
1. Scope
    i.   Introduction
    ii.  Front-end
    iii. Back-end
    iv.  Relationship to other projects
    v.   An example of ASCII board.
2. Features: Now and Future
3. Abstraction: How does it work?
4. Testing/Requirements
5. Performance


SCOPE
=========
The engine has two main parts: the front-end and the back-end. The front-end
handles all of the GUI and user inputs along with making each individual
component of the engine work together. It is what is 'visible' to the users.

The back-end is the heavy lifting of the program. It handles all of the search-
and-evaluation of the board along with storing all of the information. We will
look into these two sections separately.

FRONT-END
----------
The most obvious part of the front end is the GUI. It is a simple ASCII graphic
that shows where the pieces are on a chess board. If desired, the engine can be
read in a chess notation style instead.

The front end also handles user inputs. The user specifies his/her moves using
algebraic style chess notation into the terminal. It handles everything you
would expect in a chess engine: castling, en passant, pawn push, checks, pins,
illegal moves and much more.

In this engine there is a special type of algebraic notation. This is because it
is clearer and easier to work with while the engine is under development. The
rules for each note is as follows:

    1. The move is prepended with the symbol for the chess piece.
    2. Add the current algebraic position (e.g. 'e6').
    3. If just moving, the current position is followed by the '>' symbol. If
       capturing, the position is instead followed by the 'x' symbol.
    4. Add the final algebraic position.
    5. Castling is consistent with kingside as 0-0 and queenside as 0-0-0.
    6. The engine handles the checks and checkmates on its own.

So as an example, if the King were to move from e1 to f1 the notation for this
move would be "Ke1>f1". Another example, if a pawn moved from e2 to e4 it would
use "e2>e4". As a final example, a knight is capturing a piece on a2 from b1
which has notation "Na2xb1".

BACK-END
---------
The back-end works as individual components that are completely isolated from
one another. They are interfaced together on the front-end. The components that
are individually constructed are:
    1. Core: contains vectors which control relative movement of pieces.
    2. Chessboard: Stores the logic behind the chessboard and piece storage.
    3. Pieces: Has the movement of each piece plus any special rules it may have.
    4. Usercontrol: Handles the GUI and UI of the engine.
    5. Movegenerator: Finds all of the legal moves on a turn and handles all of
                      the rules.
    6. Engine: The brains. Handles the computer's move-making logic.

DEPENDANCY
-----------
There is no dependancy on any other modules outside of this repository and the
basic install of python. It only uses the unittest, time and copy modules in
the entire code base.

ASCII BOARD LAYOUT
-------------------
Until a true GUI is developed, the board is rendered as a ASCII picture. There
are multiple designs being considered. Below are some examples that might make
it into the final game.

Design 1: Letter representation.

+----------+
| rnbqkbnr |
| pppppppp |
| ........ |
| ........ |
| ........ |
| ........ |
| PPPPPPPP |
| RNBQKBNR |
+----------+

Design 2 & 3: ASCII art representation.

  +------------------------+       +-*--b--c--d--*--f--g--*-+
8 |*R *N:*B *Q:*K *B:*N *R:|     8 |[r][n][b][q][k][b][n][r]|
7 |*P:*P *P:*P *P:*P *P:*P |     7 |[p][p][p][p][p][p][p][p]|
6 |   :::   :::   :::   :::|     6 |   :::   :::   :::   :::|
5 |:::   :::   :::   :::   |     5 |:::   :::   :::   :::   |
4 |   :::   :::   :::   :::|     4 |   :::   :::   :::   :::|
3 |:::   :::   :::   :::   |     3 |:::   :::   :::   :::   |
2 | P :P: P :P: P :P: P :P:|     2 |<P><P><P><P><P><P><P><P>|
1 |:R: N :B: Q :K: B :N: R |     1 |<R><N><B><Q><K><B><N><R>|
  +------------------------+   =>  +-*--b--c--d--*--f--g--*-+
    a  b  c  d  e  f  g  h


Design 4: Unicode representation.

8 ║♜ ♞ ♝ ♛ ♚ ♝ ♞ ♜
7 ║♟ ♟ ♟ ♟ ♟ ♟ ♟ ♟
6 ║… … … … … … … …
5 ║… … … … … … … …
4 ║… … … … … … … …
3 ║… … ♘ … … … … …
2 ║♙ ♙ ♙ ♙ ♙ ♙ ♙ ♙
1 ║♖ … ♗ ♕ ♔ ♗ ♘ ♖
——╚═══════════════
—— a b c d e f g h

For the moment we are using the first design as it is the simplest to implement
however design 3 might come in later.


FEATURES
==========
Here are the current features along with the future features I wish to
implement in the engine.

CURRENT FEATURES
    - A playable chessboard for multiple players.
    - Basic GUI.
    - Basic UI.
    - Position evaluator.

FUTURE FEATURES (CURRENT WORKS IN PROGRESS)
    - Move-search algorithm.
    - The engine itself (i.e. single-player mode).

POSSIBLE FEATURES
    - A real GUI using packages like pygame. A collection of simple sprites and
    squares, nothing fancy or animated.


ABSTRACTION
===============
The chess program works like so:

Start the program;
Set up the chess board;
Repeat until win/loss/quit:
    Prompt the user for move;
    Process user input and alter the board state;
    Search for possible moves and evaluate positions;
    Pick the best move after X amount of time;
    Alter the board, show new state to the user;
    Loop to first indentented line.

Other things to include here would be ideas about classes and their methods. In
effect you are creating a mind-map of how the program works together.


TESTING/REQUIREMENTS
======================
This is where checklist-like requirements should be noted and fulfilled. These
can be anywhere from f(x)-> y unit tests up to more complex integrated tests or
anything between. Below I've listed some of the requirements that the engine
should fulfil:

BASIC MOVEMENT & RULES:
    [X] All pawns should be able to behave correctly, including moves for en
    passant, capturing, promoting and pawn pushing.
    [X] Each backline piece should obey its own movement rules, like jumping
    over pieces.
    [X] Pins should be identified and should make certain rules illegal.
    [X] Checks should be identified and handled appropriately.
    [X] Checkmates should be identified and handled appropriately.

GUI:
    [X] The board should be legible, with each piece being easily distingushed
    from the others.
    [X] The individual squares should be easily resolved, much like a physical
    board.
    [X] Making a move should update the interface.

BASIC ENGINE CHARACTERISTICS:
    [X] The engine must be able to hold all of the pieces on the board.
    [X] It must be able to make a move and update the board.

SEARCH-AND-EVALUATION:
    [ ] The engine should be able to instantly identify moves where a piece is
    taken "for nothing."
    [ ] The engine should be able to calculate if a one-move exchange is in its
    favour.
    [ ] Eventually, it should be able to also determine the outcome of a chain
    exchange.
    [ ] If there are no obvious moves, it should be able to determine the best
    move that maximises its position.


PERFORMANCE
============
This section has identified the worst bottlenecks in the program and has timed
them so that alternative algorithms can be tested and compared against.

- MoveGenerator methods (10,000 loop execution time, two kings):
    - basicmoves                     -> 0.99419593811s
    - generatemovelist               -> 14.155023098s
    - illegalmove                    -> 1.649132967s
    - initalise and generatemovelist -> 18.5522060394s
    - kingincheck                    -> 1.16838288307s
    - onlylegalmoves                 -> 11.1083350182s

- Chessboard methods (10,000 loop execution time, no pieces):
    - duplicateboard -> 15.3806021214s
